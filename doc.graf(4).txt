_> CSCI 2670 - Classwork 8
__ <!> Instructions
|> Create a \graf document with your answers to the following problems.  Save your work as a Grafstate file with the extension **{.graf.txt} and upload it to eLC.
|> You may work in small groups.  You must identify your group on eLC.
|> Only one student in the group should do the eLC  submission.
|> Look at your file when you save it and *{before} submitting it to eLC to make sure it is what you intend to submit.  Check eLC *{after} submitting your file to make sure the correct file was uploaded.  It is your responsibility to submit the correct file.
|> The last version of your answer file that you submit before the deadline is the one that will be graded. If you submit the wrong file and submit a replacement after the deadline, then the usual late policy will apply.
|>  All computational structures (i.e., automata and grammars) should be coded using Grafstate \[:+] syntax. Working automata code should produce a state diagram.
|>  All Grafstate files should compile when the TA loads them into the Grafstate Shell. A file that does not compile will not be graded.
\;
Group members:
1.)_____________________
2.)_____________________
3.)_____________________
4.)_____________________
5.)_____________________
\;
//
(1) Create a PDA P_1 that recognizes the @lang of palindromes over \S={a,b} of odd length.
(2) Create a PDA P_2 that recognizes the @lang a^ib^{2i} over \S={a,b}.
//
:+ pda P_2
Q={qs,q1,q2,q3,q4,qf}
S={a,b}
T={$, a}
q0=qs
F={qf}
qs->q1:\e,\e->$ /* mark the bottom of the stack
q1->q2:a,\e->a /* record a's
q2->q3:\e,\e->a /* prepare to read b's
q3->q2:a,\e->a /* match the b's to the a's
q3->q4:b,a->\e
  q4->q3:\e,\e->\e
q4->qf:\e,$->\e /* finish if the stack is empty
done.
//
(3) Crearte the PDA P_3 that recognizes the union of P_1 and P_2.
(4) Create a PDA M_1 that is @eqnt to the following CFG:
//
:+ pda M_1
Q={qs,q1,qloop, q2,q3,q4,q5,q6,q7,q8,q9,q10,qf}
S={a,b,S,A,B}
T={$,a,b,S,A,B}
q0=qs
F={qf}
qs->q1:\e,\e->$ /* mark the bottom of the stack
q1->qloop:\e,\e->S
qloop:a,a->\e
qloop:b,b->\e
qloop:A,A->b
qloop:B,B->a
qloop:B,B->\e
qloop->q2:S, S->b
q2->q3:\e, \e->S
q3->qloop:\e, \e->a
qloop->q4:S, S->a
q4->q5:\e, \e->B
q5->qloop:\e, \e->A
qloop->q6:A, A->S
q6->q7:\e, \e->A
q7->qloop:\e, \e->b
qloop->q8:A, A->B
q8->qloop:\e, \e->a
qloop->q9:B, B->S
q9->q10:\e, \e->b
q10->qloop:\e, \e->A
qloop->qf:\e,$->\e
done.
//
:+ cfg G1
V={S,A,B}
S={a,b}
v0=S
S->a S b|A B a
A->b A S|a B|b
B->A b S|a|\e
done.
//
//
//
(5) Choose 2 strings of length at least 4 that are derived by your grammar in @{(4)}.  Give the @leftmd for each string.
abaab
S->aSb
->aABab
->abBab
->abaab
aaaa
S->ABa
->aBBa
->aaBa
->aaaa